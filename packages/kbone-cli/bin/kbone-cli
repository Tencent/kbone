#!/usr/bin/env node


const program = require('commander')
const spawn = require('cross-spawn')
const inquirer = require('inquirer')

const options = {
    cmd: '',
    projectName: '',
    mirror: 'default',
    language: 'en'
}

program
    .version(require('../package').version, '-v, --version')
    .usage('<cmd> [project-name]')
    .option('-m, --mirror <mirror>', 'Select mirror like: npm, cnpm, taobao', /^(npm|cnpm|taobao|nj|rednpm|skimdb|yarn)$/i)
    .option('-l, --language <language>', 'Select language: en / cn', selectLanguage)
    .on('-h, --help', help)


program
    .command('init [projectName]')
    .description('Initialize a new kbone application in the current folder')
    .action(function(projectName) {
        return inquirer
            .prompt([
                {
                    type: 'list',
                    name: 'template',
                    message: '请选择开发小程序或 Web 的技术栈',
                    choices: [{
                        name: 'React',
                        value: 'react'
                    }, {
                        name: 'Vue',
                        value: 'vue'
                    }, {
                        name: 'kbone-ui',
                        value: 'kboneui'
                    }, {
                        name: 'Omi',
                        value: 'omi'
                    }, {
                        name: 'Preact',
                        value: 'preact'
                    }]
                }
            ])
            .then(answers => {
                require('../src/init-template')({
                    template: answers.template, project: projectName, mirror: options.mirror, language: options.language
                })
            })
    })


program
    .command('*')
    .action(function(currentCmd) {
        const templateName = isInitTemplate(currentCmd) // verify init-{templateName}
        // eslint-disable-next-line
				const option = arguments[2] || arguments[1] // if no arguments[2], second parameter is an option.
        // eslint-disable-next-line
        const projectName = typeof arguments[1] === 'string' ? arguments[1] : '' // if arguments[1] is not a string, no project name input.
        // init a template
        if (templateName) {
            const cmd = 'init-template'
            if (option.parent.mirror && typeof option.parent.mirror === 'string') {
                options.mirror = option.parent.mirror
            }
            // kbone init-{templateName} {projectName}
            switchCommand(cmd, {
                project: projectName, template: templateName, mirror: options.mirror, language: options.language
            })
        } else {
            // default, if it is not init a template
            spawn('kbone', ['-h'], {stdio: 'inherit'})
        }
    })

program.parse(process.argv)

function switchCommand(cmd, args) {
    if (cmd) {
        // eslint-disable-next-line
        require('../src/' + cmd)(args)
    } else {
        setTimeout(program.help, 0)
    }
}


function selectLanguage(language) {
    if (language !== 'en' && language !== 'cn') {
        language = 'en'
    }
    options.language = language
    return language
}

// verify a command is init a template, and return a template name without init-
// i.e. init-kbone-cli to kbone-cli
function isInitTemplate(cmd) {
    // eslint-disable-next-line
    return /init-(.)+/.test(cmd) && /init-([^\ ]+)/.exec(cmd)[1]
}


function help() {

}
